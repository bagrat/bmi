'use strict';

// tests for bmi
// Generated by serverless-mocha-plugin

const mochaPlugin = require('serverless-mocha-plugin');
const expect = mochaPlugin.chai.expect;
let wrapped = mochaPlugin.getWrapper('bmi', '/handler.js', 'bmi');

describe('bmi', () => {
	before((done) => {
		done();
	});

	it('should calculate the BMI correctly', async () => {
		const response = await wrapped.run({
			queryStringParameters: {weight: "66", height: "1.76"}
		});

		expect(response.statusCode).to.be.equal(200);

		const body = JSON.parse(response.body);
		expect(body).to.be.closeTo(21.30, 0.01);
	});

	it('should error on missing input', async () => {
		const response = await wrapped.run({
			queryStringParameters: {weight: "1"}
		});

		expect(response.statusCode).to.be.equal(400);

		const body = JSON.parse(response.body);
		expect(body.message).to.not.be.empty;
	});

	it('should error on bad input', async () => {
		const response = await wrapped.run({
			queryStringParameters: {weight: "1", height: "1hey"}
		});

		expect(response.statusCode).to.be.equal(400);

		const body = JSON.parse(response.body);
		expect(body.message).to.not.be.empty;
	});

	it('should error on negative numbers as input', async () => {
		const response = await wrapped.run({
			queryStringParameters: {weight: "-4", height: "-2"}
		});

		expect(response.statusCode).to.be.equal(400);

		const body = JSON.parse(response.body);
		expect(body.message).to.not.be.empty;
	});
});
